-->so there are 2 ways ki app array declare kar sakte ho
1> int[] name = new int["how many element you wnat in an array "]
or direct decleration of the array
2> int[] name ={ total number of elements in an array  } ;

--> array will contain same type of data , if it is string it will store string
int[] rollno ; , this is the initialization
rollno = new int[5] // this is the point where are memory for the object  is actually created in the heap memory


--> internal working of array
lets take a  array ;
int[] money = new int[6] ; now we can break this statement in 2 parts
1> int[] money => this things will allocates the memory( stack memory ) at the compile time
2> new int[6] => this will be created on the runtime and the memory will be allocated in heap bcoz it is an object
 > heap object are not continuous in heap( memory )
 > that's the reason that it is not necessary that the arrays are continuous in java , it fully depends on java that it will be continuous or not
 > new keyword => it is used to create the objects

--> in java only the primitive data type will be stored in the stack memory, but all the other likr hashmap  , String and all will be stored in the heap memory
 > primitives => datatype which cannot be broken down further ;

--> there are different ways by which we can access the different elements on the different index , we use different type of loops to find the different elements
  1>for loop => we all know the syntax of it

  2>while loop => we all know the syntax of it

  3>for each loop
    // for each
    //        for(int num : arr){
    //                 System.out.println(num);
    //        }


  4>convert whole array in string by .toString method and then print the string
        System.out.println(Arrays.toString(arr));   // here arr is the variable name is which array is stored

--> 2D Array {
    // consider it as the array of arrays
    arr = {
        {1,2,3},
        {4,5,6},
        {7,8,9}
    }
    ARRAY LIST
    >> IF I WANT TO INPUT THE N NUMBER OF ELEMENTS IN AN ARRAY WE CAN USE ARRAY LIST
        syntax = ArrayList<Integer>list = new ArrayList<>(SIZE) ;
        if you type (list.) then you will get lots of items ,and you can modify it
    >>

}